generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String                @id @default(uuid())
  name            String
  email           String                @unique
  image           String?
  createdAt       DateTime              @default(now())
  isAdmin         Boolean               @default(false)
  characters      Character[]
}


model Character {
  id                              String                @id @default(cuid())
  roomId                          String                @default("")
  userId                          String
  name                            String
  class                           Class
  image                           String?               @default("")
  maxHp                           Int
  currentHp                       Int
  maxCost                         Int
  currentCost                     Int
  money                           Int                   @default(0)
  attack                          Int
  defense                         Int
  dodge                           Int
  crit                            Int
  speed                           Int
  rowPos                          Int                   @default(-1)
  colPos                          Int                   @default(-1)
  hasMoved                        Boolean               @default(false)
  hasActioned                     Boolean               @default(false)
  hasUsedUltimate                 Boolean               @default(false)
  isDead                          Boolean               @default(false)
  isStun                          Boolean               @default(false)
  isConfused                      Boolean               @default(false)
  isDark                          Boolean               @default(false)
  isImmortal                      Boolean               @default(false)
  attackBuffedAmount              Int                   @default(0)
  attackBuffedTurn                Int                   @default(0)
  defenseBuffedAmount             Int                   @default(0)
  defenseBuffedTurn               Int                   @default(0)
  protectorId                     String?         
  protectedTurn                   Int                   @default(0)
  dotDamageTurn                   Int                   @default(0)
  dotDamageAmount                 Int                   @default(0)
  skills                          CharacterSkill[]
  inventory                       Item[]
  battleRoom                      BattleRoom            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model Monster {
  id              String                @id @default(cuid())
  dungeonId       String
  name            String
  description     String?
  maxHp           Int
  attack          Int
  defense         Int
  dodge           Int
  crit            Int
  speed           Int
  reward          Int
  skills          MonsterSkill[]
  items           Item[]
  dungeon         Dungeon               @relation(fields: [dungeonId], references: [id], onDelete: Cascade)
}


model Entity {
  id              String                @id @default(cuid())
  roomId          String
  name            String
  description     String?
  maxHp           Int
  attack          Int
  defense         Int
  dodge           Int
  crit            Int
  speed           Int
  reward          Int
  rowPos          Int
  colPos          Int
  isDead          Boolean               @default(false)
  isStun          Boolean               @default(false)
  isConfused      Boolean               @default(false)
  buffedAmount    Int                   @default(0)
  buffedTurn      Int                   @default(0)
  dotDamageTurn   Int                   @default(0)
  dotDamageAmount Int                   @default(0)
  items           Item[]
  battleRoom      BattleRoom            @relation(fields: [roomId], references: [id], onDelete: Cascade)
}


model Item {
  id              String                @id @default(cuid())
  characterId     String
  monsterId       String
  entityId        String
  name            String
  description     String?
  sellPrice       Int
  buyPrice        Int
  isStoreItem     Boolean
  character       Character             @relation(fields: [characterId], references: [id], onDelete: Cascade)
  monster         Monster               @relation(fields: [monsterId], references: [id], onDelete: Cascade)
  entity          Entity                @relation(fields: [entityId], references: [id], onDelete: Cascade)
}


model Chat {
  id              String                @id @default(cuid())
  roomId          String
  createdAt       DateTime              @default(now())
  sender          String
  chatType        ChatType
  battleRoom      BattleRoom            @relation(fields: [roomId], references: [id], onDelete: Cascade)
}


model CharacterSkill {
  id              String                @id @default(cuid())
  characterId     String
  name            String
  description     String?
  class           Class
  range           SkillRange
  isEntire        Boolean
  isUltimate      Boolean
  requiredCost    Int
  requiredHp      Int
  character       Character             @relation(fields: [characterId], references: [id], onDelete: Cascade)
}


// model AIResponse {
//   id              String                @id @default(cuid())
//   rowPos          Int
//   colPos          Int
//   hpChange        Int
//   defenseChange   Int
//   attackChange    Int

// }


model MonsterSkill {
  id              String                @id @default(cuid())
  monsterId       String
  name            String
  description     String?
  range           SkillRange
  isEntire        Boolean
  monster         Monster               @relation(fields: [monsterId], references: [id], onDelete: Cascade)
}


model Dungeon {
  id              String                @id @default(cuid())
  name            String
  description     String?
  difficulty      Difficulty
  minMember       Int?
  maxMember       Int?
  monsters        Monster[]
}


model BattleRoom {
  id              String                @id @default(cuid())
  name            String?
  round           Int
  numActions      Int
  roomStatus      RoomStatus
  participants    Character[]
  entities        Entity[]
  chats           Chat[]
}


enum ChatType {
  Chat
  System
  Action
  Result
  Debuff
  Buff
}


enum Class {
  Gladiolus
  Saintpaulia
  Saffron
  Cypress
  Blackthorn
}


enum SkillRange {
  short
  medium
  long
}


enum Difficulty {
  Easy
  Normal
  Hard
}


enum RoomStatus {
  Waiting
  Processing
  User
  Monster
  End
}
