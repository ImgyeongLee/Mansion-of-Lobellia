generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String                @id @default(uuid())
  name            String
  email           String                @unique
  image           String?
  createdAt       DateTime              @default(now())
  isAdmin         Boolean               @default(false)
  character       Character?
}


model Character {
  id                              String                @id @default(cuid())
  roomId                          String?               
  userId                          String                @unique
  name                            String
  class                           Class
  image                           String?               @default("")
  maxHp                           Int
  currentHp                       Int
  maxCost                         Int
  currentCost                     Int
  money                           Int                   @default(0)
  attack                          Int
  defense                         Int
  dodge                           Int
  crit                            Int
  speed                           Int
  rowPos                          Int                   @default(-1)
  colPos                          Int                   @default(-1)
  hasMoved                        Boolean               @default(false)
  hasActioned                     Boolean               @default(false)
  hasUsedUltimate                 Boolean               @default(false)
  isDead                          Boolean               @default(false)
  isStun                          Boolean               @default(false)
  isConfused                      Boolean               @default(false)
  isDark                          Boolean               @default(false)
  isImmortal                      Boolean               @default(false)
  attackBuffedAmount              Int                   @default(0)
  attackBuffedTurn                Int                   @default(0)
  defenseBuffedAmount             Int                   @default(0)
  defenseBuffedTurn               Int                   @default(0)
  protectorId                     String?         
  protectedTurn                   Int                   @default(0)
  dotDamageTurn                   Int                   @default(0)
  dotDamageAmount                 Int                   @default(0)
  createdAt                       DateTime              @default(now())
  skills                          CharacterSkillRelation[]
  inventory                       CharacterInventory[]
  battleRoom                      BattleRoom?           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model CharacterSkill {
  id                  String                @id @default(cuid())
  image               String?
  name                String
  description         String?
  type                SkillType
  range               SkillRange
  isAllyTargeting     Boolean
  isEnemyTargeting    Boolean        
  isSelfTargeting     Boolean       
  isEntire            Boolean
  isUltimate          Boolean
  requiredCost        Int
  requiredHp          Int
  characters          CharacterSkillRelation[]

  @@index([name(sort: Asc)])
}


model CharacterInventory {
  id                              String                @id @default(cuid())
  characterId                     String
  itemId                          String
  amount                          Int                   @default(0)
  character                       Character             @relation(fields: [characterId], references: [id], onDelete: Cascade)
  item                            Item                  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([characterId, itemId])
}

model CharacterSkillRelation {
  id                              String                @id @default(cuid())
  characterId                     String
  skillId                         String
  character                       Character             @relation(fields: [characterId], references: [id], onDelete: Cascade)
  skill                           CharacterSkill        @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([characterId, skillId]) // 하나의 캐릭터와 하나의 스킬만 연결
}


model Monster {
  id              String                @id @default(cuid())
  name            String
  description     String?
  maxHp           Int
  attack          Int
  defense         Int
  dodge           Int
  crit            Int
  speed           Int
  reward          Int
  skills          MonsterSkill[]
  items           Item[]
  dungeon         Dungeon[]
}


model Entity {
  id              String                @id @default(cuid())
  roomId          String
  name            String
  description     String?
  maxHp           Int
  attack          Int
  defense         Int
  dodge           Int
  crit            Int
  speed           Int
  reward          Int
  rowPos          Int                  
  colPos          Int                   
  isDead          Boolean               @default(false)
  isStun          Boolean               @default(false)
  isConfused      Boolean               @default(false)
  buffedAmount    Int                   @default(0)
  buffedTurn      Int                   @default(0)
  dotDamageTurn   Int                   @default(0)
  dotDamageAmount Int                   @default(0)
  skills          MonsterSkill[]
  items           Item[]
  battleRoom      BattleRoom            @relation(fields: [roomId], references: [id], onDelete: Cascade)
}


model Item {
  id                              String                @id @default(cuid())
  image                           String?
  name                            String
  description                     String
  sellPrice                       Int                   @default(0)
  buyPrice                        Int                   @default(0)
  isStoreItem                     Boolean
  hpRecovery                      Int                   @default(0)
  costRecovery                    Int                   @default(0)
  speedBuff                       Int                   @default(0)
  attackBuff                      Int                   @default(0)
  defenseBuff                     Int                   @default(0)
  critBuff                        Int                   @default(0)
  dodgeBuff                       Int                   @default(0)
  dotDamageCure                   Boolean               @default(false)
  isConfusedCure                  Boolean               @default(false)
  monsters                        Monster[]
  entities                        Entity[]
  characterInventories            CharacterInventory[]

  @@index([name(sort: Asc)])
}


model Chat {
  id              String                @id @default(cuid())
  roomId          String
  createdAt       DateTime              @default(now())
  sender          String
  image           String
  chatType        ChatType
  battleRoom      BattleRoom            @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)])
}


// model AIResponse {
//   id              String                @id @default(cuid())
//   rowPos          Int
//   colPos          Int
//   hpChange        Int
//   defenseChange   Int
//   attackChange    Int

// }


model MonsterSkill {
  id              String                @id @default(cuid())
  image           String?
  name            String
  description     String?
  range           SkillRange
  isSelfTargeting Boolean
  isEntire        Boolean
  monster         Monster[]
  entities        Entity[]
}


model Dungeon {
  id              String                @id @default(cuid())
  name            String
  size            Int                 
  description     String?
  difficulty      Difficulty
  minMember       Int
  maxMember       Int
  monsters        Monster[]
}



model BattleRoom {
  id              String                @id @default(cuid())
  invitationCode  String                @unique
  name            String
  dungeonName     String
  description     String?
  minMember       Int
  maxMember       Int
  difficulty      Difficulty
  round           Int                   @default(0)
  queue           String[]              @default([])
  roomStatus      RoomStatus
  participants    Character[]
  entities        Entity[]
  chats           Chat[]
  createdAt       DateTime              @default(now())
}


enum ChatType {
  Chat
  System
  Action
  Result
  Debuff
  Buff
}


enum Class {
  Gladiolus
  Saintpaulia
  Cypress
  Blackthorn
}

enum SkillType {
  General
  Gladiolus
  Saintpaulia
  Cypress
  Blackthorn
}


enum SkillRange {
  Self
  Narrow
  Normal
  Wide
}


enum Difficulty {
  Easy
  Normal
  Hard
}


enum RoomStatus {
  Waiting
  User
  Monster
  Result
  End
}
